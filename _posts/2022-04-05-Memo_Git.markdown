---
layout: post
title: (Tr√®s) courte introduction √† Git
date: 2022-04-05
description: M√©mo Git
img: theme/Memo-Theme.png # Add image post (optional)
tags: [M√©mos, Explication]
author: Thibaut Monseigne # Add name author (optional)
---

* TOC
{:toc}
{: .toc-post}

## D√©finitions

### D√©finitions de base

* **Git** est un logiciel de gestion de versions d√©centralis√©.
* **Github** est un site (le plus connu) qui h√©berge votre code en utilisant Git.
* **Gitlab** est une surcouche √† Git permettant de cr√©er son propre *Github*.

### Git, un logiciel de gestion de versions d√©centralis√©

* le **versionning** permet de conserver en m√©moire toutes les modifications apport√©es aux fichiers afin de garder une trace et permettre de passer facilement d'une version √† l'autre
* **D√©centraliser** les versions de notre d√©veloppement permet √† plusieurs personnes d'intervenir en m√™me temps sur un m√™me projet.

### D√©finitions techniques

* **D√©p√¥t** : Il s'agit simplement de votre dossier Git (repository en anglais)
* **Commit** : C'est le nom donn√© √† une modification enregistr√©e (modification pouvant concerner plusieurs fichiers)
* **Branches** : Un d√©p√¥t peut avoir plusieurs branches ind√©pendantes. Chaque branche vit sa vie et peut √™tre fusionn√©e avec une autre.  
* **Issues** : C'est un ticket (une sorte de point dans une todo list). Cela peut √™tre un bug trouv√© √† corriger, des suggestions... Cela permet de garder une trace, surtout si l'on n'a pas le temps de corriger tout de suite un point.
* **CI** : Int√©gration Continue (Continuous Integration), souvent pr√©sente dans de gros projets, il s'agit d'une routine automatique qui se lance pour v√©rifier que le code marche toujours. Cela peut √™tre juste : compiler un programme, le lancer et voir si √ßa explose ou, si le programme est bien propre, le compiler le lancer avec des tests, analyser le code, la gestion de la m√©moire... Cela peut √™tre lanc√© √† chaque commit ou tous les jours, semaines... ou √† la demande.

## Avantages et inconv√©nients d'un syst√®me de Git

### Avantages

* Garder une trace du d√©veloppement
* Permettre un partage automatique de nos projets (si on le d√©sire, le d√©p√¥t peut √™tre priv√©)
  * Ce partage concerne aussi juste des bouts de codes : par exemple, votre visualisation de donn√©es est magnifique et un coll√®gue veut la m√™me.
* La visualisation rapide et pr√©cise des modifications √† chaque version

Pour des projets plus imposants qu'un simple test, analyse de datas :

* G√©rer les versions.
* G√©rer les d√©veloppeurs (droits d‚Äôacc√®s).
* G√©rer les ‚Äúissues‚Äù (rapports de bug, suggestions d‚Äô√©volution...).
* Cr√©er une documentation en ligne pour un projet.
* Construction, test et d√©ploiement automatiques.

### Inconv√©nients

* Le versionning est ultra performant pour les fichiers textes bruts (code, fichier texte...). Les fichiers plus compliqu√©s (images, sons, word, pdf, binaires...) sont int√©gralement remplac√©s √† chaque changement. Mais cet inconv√©nient a tendance √† disparaitre.

### Fausses excuses pour ne pas l'utiliser

* Mon code ne sert √† rien pour les autres. *Vous seriez √©tonn√© des petits √©l√©ments utiles pour √©viter de r√©inventer la roue √† chaque fois.*
* Mon code est moche et pas document√©. *Comme la plupart des codes sur internet, et quelques petites habitudes permettent de grandement r√©duire cette impression.*
* C'est trop compliqu√©, je ne comprends rien. *Faux, √ßa √† l'air compliqu√©, mais il y a des interfaces graphiques performantes.*
* Je n‚Äôaime pas les lignes de commandes. *Moi non plus, au 21e si√®cle, on a des interfaces graphiques pour un peu tout.*
* Je ne veux pas que tout soit pris dans le dossier. *Git n'est pas b√™te, il est possible d'automatiquement s√©lectionner des dossiers √† exclure.*

## Exemple d'un nouveau d√©p√¥t Github

### Pr√©requis

* Cr√©ation d'un compte [Github](https://github.com/)
* Si √©ligible, Mise √† jour vers un compte [Github √©ducation](https://education.github.com/) : une adresse mail acad√©mique ainsi qu'une preuve d'affiliation est n√©cessaire (carte d'√©tudiant, enseignant, chercheur...). Cela vous permettra d'avoir acc√®s √† un tas de logiciels et services compl√®tement et gratuitement (IDEs Jetbrains et Gitkraken entre autres)
* Installation de [Git](https://git-scm.com/downloads)
* Installation de [Gitkraken](https://www.gitkraken.com/) (avec un compte Github √©ducation vous aurez acc√®s √† l'ensemble du logiciel sinon pas de service ou d√©p√¥t priv√©)

### Github : Premier D√©p√¥t

<figure id="Fig1">
 <a href = "/assets/img/Git/Github_Main.png" data-lightbox = "Memo" data-title = "Page principale Github"><img src = "/assets/img/Git/Github_Main.png" alt = "Page principale Github" style = "max-width:75%;"/></a>
 <figcaption style = "text-align:center">Page principale Github</figcaption>
</figure>

La page principale de Github vous montre vos derniers projets et un bouton pour cr√©er un nouveau d√©p√¥t.

<figure id="Fig2">
 <a href = "/assets/img/Git/Github_New.png" data-lightbox = "Memo" data-title = "Page cr√©ation de d√©p√¥t"><img src = "/assets/img/Git/Github_New.png" alt = "Page cr√©ation de d√©p√¥t" style = "max-width:75%;"/></a>
 <figcaption style = "text-align:center">Page cr√©ation de d√©p√¥t</figcaption>
</figure>

Lors de la cr√©ation d'un d√©p√¥t, vous devez indiquer un nom. Tout le reste est falcutatif, mais recommand√©, un premier commit sera automatiquement cr√©√© avec le readme, la licence et le gitignore par d√©faut que vous aurez s√©lectionn√©.

<figure id="Fig3">
 <a href = "/assets/img/Git/Github_Basic.png" data-lightbox = "Memo" data-title = "Page d√©p√¥t exemple"><img src = "/assets/img/Git/Github_Basic.png" alt = "Page d√©p√¥t exemple" style = "max-width:75%;"/></a>
 <figcaption style = "text-align:center">Page d√©p√¥t exemple</figcaption>
</figure>

Voici un d√©p√¥t basique cr√©√© sans aucune modification ([lien](https://github.com/tmonseigne/Basic-Repo)).

### Gitkraken : Interface graphique pour Git

<figure id="Fig4">
 <a href = "/assets/img/Git/GitKraken_Start.png" data-lightbox = "Memo" data-title = "Gitkraken recherche d√©p√¥t"><img src = "/assets/img/Git/GitKraken_Start.png" alt = "Gitkraken recherche d√©p√¥t" style = "max-width:75%;"/></a>
 <figcaption style = "text-align:center">Gitkraken recherche d√©p√¥t</figcaption>
</figure>

GitKraken permet de se passer de lignes de commande. Selon moi, c'est l'outil le plus performant et facile d'utilisation pour cette tache. En revanche, il est limit√© (pas de d√©p√¥ts et de services priv√©s comme un Gitlab personnel) si vous ne poss√©dez pas de compte Github √©ducation. Visual studio Code avec GitLens (fait par les m√™mes personnes que GitKraken) et Gitgraph permet de s'en passer, mais est beaucoup moins intuitif et ne poss√®de pas toutes les fonctionnalit√©s de son grand fr√®re.

<figure id="Fig5">
 <a href = "/assets/img/Git/GitKraken_Basic.png" data-lightbox = "Memo" data-title = "Gitkraken D√©p√¥t exemple avec des modifs"><img src = "/assets/img/Git/GitKraken_Basic.png" alt = "Gitkraken D√©p√¥t exemple avec des modifs" style = "max-width:75%;"/></a>
 <figcaption style = "text-align:center">Gitkraken D√©p√¥t exemple avec des modifs</figcaption>
</figure>

Une fois un d√©p√¥t ouvert, vous voyez un graphique repr√©sentant vos commits ainsi que les diff√©rentes branches de votre d√©p√¥t. Vous pouvez √©galement voir l'√©tat actuel de votre d√©p√¥t sur votre ordinateur.  
Dans cet exemple, vous voyez les 4 types d'ic√¥nes pour visualiser l'√©tat du d√©p√¥t :

* ‚ûï Pour les ajouts de fichiers.
* ‚ûñ Pour les suppressions de fichiers.
* üñäÔ∏è Pour les modifications de fichiers.
* üìù Pour les d√©placements ou renommages de fichiers.

<figure id="Fig6">
 <a href = "/assets/img/Git/GitKraken_Change.png" data-lightbox = "Memo" data-title = "Gitkraken exemple de fichier modifi√©"><img src = "/assets/img/Git/GitKraken_Change.png" alt = "Gitkraken exemple de fichier modifi√©" style = "max-width:75%;"/></a>
 <figcaption style = "text-align:center">Gitkraken exemple de fichier modifi√©</figcaption>
</figure>

Lors de la s√©lection d'un fichier modifi√©, vous pourrez voir les ajouts et suppressions directement et valider ou annuler chaque ligne ind√©pendamment.

## Bonus track de gens qui aime bien les fioritures

### Gitmoji

[Gitmoji](https://gitmoji.dev/) est une tentative de standardisation d‚Äôutilisation d‚Äôemoji dans les messages de commits. Le principe est simple, si vous avez besoin de plusieurs emoji pour cat√©goriser votre commit c‚Äôest que vous devez (ou auriez d√ª) faire plusieurs commits √† la place. Pour ma part, j‚Äôutilise, √† l‚Äôheure actuelle, presque exclusivement un sous-ensemble de ce site avec une d√©finition plus g√©n√©rique pour certains.

| Gitmoji | Code | Utilisation commune | Mon utilisation additionnelle |
|:-------:|:-----|:--------------------|:-----------------------------|
|   üéâ   | :tada:                      | D√©but du projet | D√©marrage d'une nouvelle feature |
|   ‚ú®   | :sparkles:                  | Ajout d'une nouvelle Feature |  |
|   üöß   | :construction:              | Work in progress |  |
|   üôà   | :see_no_evil:               | Mise √† jour du Gitignore |  |
|   üìù   | :memo:                      | Maj Documentation | Maj documentation de code, readme, license, et tous fichiers d'informations |
|   üêõ   | :bug:                       | Correction d'un bug | Hotfix (critique ou non) |
|   üí•   | :boom:                      | Changement cassant le code |  |
|   üî•   | :fire:                       | Suppression de fichiers | Suppression de code historique ou inutile |
|   üèóÔ∏è   | :building_construction:     | Mise √† jour architecturale |  |
|   ‚ôªÔ∏è   | :recycle:                   | Refactoring de code  | Reformatage, mise en page, changement de type, nom de variable, fichiers  |
|   üíÑ   | :lipstick:                  | Maj UI & Design |  |
|   ‚úÖ   | :white_check_mark:          | Ajout, Mise √† jour de Tests |  |
|   üîä   | :loud_sound:                | Ajout de Log |  |
|   üîá   | :mute:                      | Suppression de Log |  |
|   üë∑   | :construction_worker:       | Mise en place ou Mise √† jour d'un CI |  |
|   üîÄ   | :twisted_rightwards_arrows: | Fusion de branche |  |
|   ‚ûï   | :heavy_plus_sign:           | Ajout de d√©pendance | Ajout de sous-module |
|   ‚ûñ   | :heavy_minus_sign:          | Suppression de d√©pendance | Suppression de sous-module |
|   ‚¨ÜÔ∏è   | :arrow_up:                  | Mise √† jour de d√©pendance | Mise √† jour de sous-module |
|   ‚¨áÔ∏è   | :arrow_down:                | Mise √† jour (r√©trograde) de d√©pendance | Mise √† jour (r√©trograde) de sous-module |

### Badges

Les badges sont souvent utilis√©s, car √©tant des images r√©f√©renc√©es gr√¢ce √† un lien, un fichier markdown peut les afficher (comme le readme) et se mettre √† jour tout seul, ils servent notamment √† afficher le statut de l‚Äôint√©gration, le type de licence, le lien vers la documentation‚Ä¶
[Shields.IO](https://shields.io/) est un g√©n√©rateur de badge ainsi qu‚Äôun guide pour trouver (cr√©er) le lien vers certains (un grand nombre) de badges automatiques.  
Exemple pour le d√©p√¥t pr√©c√©dent : ![License d√©p√¥t exemple](https://img.shields.io/github/license/tmonseigne/Basic-Repo) (lien : `https://img.shields.io/github/license/tmonseigne/Basic-Repo`)  
Exemple de Badge Custom :  ![Custom Badge](https://img.shields.io/badge/Custom-Badge-informational) (lien : `https://img.shields.io/badge/Custom-Badge-informational`)  

## Exemple avec un template cpp

Voici des captures pour un D√©p√¥t template ([lien](https://github.com/tmonseigne/cpp-crossplatform-ci-template)).

<figure id="Fig7">
 <a href = "/assets/img/Git/Github_Template.png" data-lightbox = "Memo" data-title = "Github D√©p√¥t Template"><img src = "/assets/img/Git/Github_Template.png" alt = "Github D√©p√¥t Template" style = "max-width:75%;"/></a>
 <figcaption style = "text-align:center">Github D√©p√¥t Template</figcaption>
</figure>

<figure id="Fig8">
 <a href = "/assets/img/Git/GitKraken_Template.png" data-lightbox = "Memo" data-title = "Gitkraken D√©p√¥t Template"><img src = "/assets/img/Git/GitKraken_Template.png" alt = "Gitkraken D√©p√¥t Template" style = "max-width:75%;"/></a>
 <figcaption style = "text-align:center">Gitkraken D√©p√¥t Template</figcaption>
</figure>
